{"version":3,"sources":["Header.tsx","Footer.tsx","QuoteContainer.tsx","App.tsx","serviceWorker.js","index.js"],"names":["Header","id","className","Footer","href","QuoteBox","quote","Text","Author","NewQuote","generator","onClick","TweetQuote","text","encodeURIComponent","icon","faTwitter","QuoteContainer","useState","setQuote","generateQuote","a","fetch","then","response","json","content","author","style","minHeight","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4OAYeA,G,YAPA,kBACb,yBAAKC,GAAG,SAASC,UAAU,mCACzB,wBAAIA,UAAU,aAAd,wBACA,uBAAGA,UAAU,QAAb,8CCYWC,EAfA,kBACb,4BAAQF,GAAG,SAASC,UAAU,oDAC5B,8IAEuD,uBAAGE,KAAK,uCAAR,gBAFvD,KAIA,mFACuD,uBAAGA,KAAK,6CAAR,qCADvD,KAGA,kFACsD,uBAAGA,KAAK,0CAAR,uBADtD,O,6CCgDEC,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACf,gCAAYJ,UAAU,aAAaD,GAAG,SACpC,uBAAGA,GAAG,QAAQK,EAAMC,MACpB,4BAAQL,UAAU,oBAAoBD,GAAG,kBACvC,0BAAMA,GAAG,UAAUK,EAAME,WAQzBC,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAH,OACf,wBAAIR,UAAU,oBACZ,4BAAQD,GAAG,YAAYC,UAAU,mCAAmCS,QAASD,GAA7E,eAOEE,EAAa,SAAC,GAAmC,IAAjCN,EAAgC,EAAhCA,MACdO,EAAOC,mBAAmB,IAAD,OAAKR,EAAMC,KAAX,eAAsBD,EAAME,SAC3D,OACE,wBAAIN,UAAU,oBACZ,uBAAGD,GAAG,cAAcC,UAAU,kBAAkBE,KAAI,gDAA2CS,IAAQ,kBAAC,IAAD,CAAiBE,KAAMC,MAA9H,kBAKSC,EApFQ,WAAO,IAAD,EAEDC,mBAAgB,CACxCX,KAAM,8BACNC,OAAQ,oBAJiB,mBAEpBF,EAFoB,KAEba,EAFa,KAOrBC,EAAa,uCAAG,4BAAAC,EAAA,6DAEpBF,EAAS,CACPZ,KAAM,mBACNC,OAAQ,qBAJU,kBAcgBc,MAAM,kCAAkCC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAdlF,OAcZD,EAdY,OAelBL,EAAS,CACPZ,KAAMiB,EAASE,QACflB,OAAQgB,EAASG,SAjBD,gDAqBlBR,EAAS,CACPZ,KAAM,oCACNC,OAAQ,oBAvBQ,yDAAH,qDA6BnB,OACE,yBAAKP,GAAG,sBAAsB2B,MAAO,CAAEC,UAAW,SAAlD,KACE,yBAAK3B,UAAU,uCAAuCD,GAAG,aACvD,yBAAKC,UAAU,kBACb,kBAAC,EAAD,CAAUI,MAAOA,IACjB,yBAAKJ,UAAU,eACb,kBAAC,EAAD,CAAUQ,UAAWU,IACrB,kBAAC,EAAD,CAAYd,MAAOA,SCrChBwB,EARH,kBACV,yBAAK7B,GAAG,OACN,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEgB8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d701f177.chunk.js","sourcesContent":["import React from 'react';\n\n/**\n * Header represents the header of randomquoter\n */\nconst Header = () => (\n  <div id=\"header\" className=\"jumbotron text-white bg-primary\">\n    <h1 className=\"display-4\">Random Quote Machine</h1>\n    <p className=\"lead\">Generate random quotes out of thin air!</p>\n  </div>\n)\n\nexport default Header;","import React from 'react';\n\n/**\n * Footer represents the footer of randomquoter\n */\nconst Footer = () => (\n  <footer id=\"footer\" className=\"footer small bg-secondary text-white text-center\" >\n    <p>\n      Copyright Â© 2020 Jan Reggie Dela Cruz and contributors.\n      Project for the Front End Libraries Certification in <a href=\"https://www.freecodecamp.org/learn/\">freeCodeCamp</a>.\n    </p>\n    <p>\n      You may view the source code of this project over at <a href=\"https://github.com/janreggie/randomquoter\">github.com/janreggie/randomquoter</a>.\n    </p>\n    <p>\n      All quotes from this project have been sourced from <a href=\"https://github.com/lukePeavey/quotable\">lukePeavey/quotable</a>.\n    </p>\n  </footer>\n)\n\nexport default Footer;","import React, { useState } from 'react'\nimport { Quote } from './Quote'\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\n/**\n * QuoteContainer is the React component used to display and generate quotes.\n */\nconst QuoteContainer = () => {\n\n  const [quote, setQuote] = useState<Quote>({\n    Text: \"Press New Quote to generate\",\n    Author: \"Press New Quote\"\n  })\n\n  const generateQuote = async () => {\n\n    setQuote({\n      Text: \"Fetching data...\",\n      Author: \"Fetching data...\"\n    })\n\n    // See https://github.com/lukePeavey/quotable for response format.\n    type Response = {\n      content: string,\n      author: string\n    }\n\n    try {\n      const response : Response = await fetch('https://api.quotable.io/random').then(response => response.json())\n      setQuote({\n        Text: response.content,\n        Author: response.author\n      })\n\n    } catch {\n      setQuote({\n        Text: \"Could not fetch quote. Try again.\",\n        Author: \"Press New Quote\"\n      })\n    }\n\n  }\n\n  return (\n    <div id=\"quote-box-container\" style={{ minHeight: \"50vh\" }}>  {/* container needed to ensure card doesn't occupy entire height */}\n      <div className=\"card border-primary mx-auto bg-light\" id=\"quote-box\">\n        <div className=\"card-body h-50\" >\n          <QuoteBox quote={quote} />\n          <div className=\"list-inline\">\n            <NewQuote generator={generateQuote} />\n            <TweetQuote quote={quote} />\n          </div>\n        </div>\n      </div>\n    </div >\n  )\n}\n\n/**\n * QuoteBox displays a quote.\n */\nconst QuoteBox = ({ quote } : { quote : Quote }) => (\n  <blockquote className=\"blockquote\" id=\"quote\">\n    <p id=\"text\">{quote.Text}</p>\n    <footer className=\"blockquote-footer\" id=\"author-context\">\n      <span id=\"author\">{quote.Author}</span>\n    </footer>\n  </blockquote>\n)\n\n/**\n * NewQuote generates a new quote from a `generator` procedure\n */\nconst NewQuote = ({ generator } : { generator: () => void }) => (\n  <li className=\"list-inline-item\">\n    <button id=\"new-quote\" className=\"list-inline-item btn btn-primary\" onClick={generator}>New Quote</button>\n  </li>\n)\n\n/**\n * TweetQuote creates a link that allows the current tweet to be shared on Twitter\n */\nconst TweetQuote = ({ quote } : { quote : Quote }) => {\n  const text = encodeURIComponent(`\"${quote.Text}\" - ${quote.Author}`)\n  return (\n    <li className=\"list-inline-item\">\n      <a id=\"tweet-quote\" className=\"btn btn-primary\" href={`https://twitter.com/intent/tweet?text=${text}`}><FontAwesomeIcon icon={faTwitter} /> Tweet Quote</a>\n    </li>\n  )\n}\n\nexport default QuoteContainer\n","import React from 'react';\nimport './App.scss';\nimport Header from './Header';\nimport Footer from './Footer';\nimport QuoteContainer from './QuoteContainer';\n\nconst App = () => (\n  <div id=\"App\">\n    <Header />\n    <QuoteContainer />\n    <Footer />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}