{"version":3,"sources":["Header.tsx","Footer.tsx","QuoteContainer.tsx","App.tsx","serviceWorker.js","index.js"],"names":["Header","id","className","Footer","href","QuoteContainer","props","state","quote","Text","Author","generateQuote","bind","fetch","then","response","json","data","setState","content","author","this","newQuoteArgs","generator","style","minHeight","React","Component","QuoteBox","footerContent","Context","NewQuote","onClick","TweetQuote","text","encodeURIComponent","icon","faTwitter","App","Boolean","window","location","hostname","match","require","get","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yPAWeA,MATf,WACE,OACE,yBAAKC,GAAG,SAASC,UAAU,mCACzB,wBAAIA,UAAU,aAAd,wBACA,uBAAGA,UAAU,QAAb,6CCcSC,MAlBf,WACE,OACE,4BAAQF,GAAG,SAASC,UAAU,oDAC5B,6HAEuD,uBAAGE,KAAK,uCAAR,gBAFvD,KAIA,mFACuD,uBAAGA,KAAK,6CAAR,qCADvD,KAGA,kFACsD,uBAAGA,KAAK,2CAAR,aADtD,gCAE6B,uBAAGA,KAAK,mDAAR,mB,mDCP7BC,E,kDAIJ,WAAYC,GAAgB,IAAD,8BACzB,cAAMA,IAHRC,WAE2B,EAGzB,EAAKA,MAAQ,CAEXC,MAAO,CACLC,KAAM,8BACNC,OAAQ,oBAGZ,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBAVI,E,4DAcJ,IAAD,OACpBC,MAAM,kCACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,EAAKC,SAAS,CACZV,MAAO,CACLC,KAAMQ,EAAKE,QACXT,OAAQO,EAAKG,aAIrBC,KAAKH,SAAS,CACZV,MAAO,CACLC,KAAM,mBACNC,OAAQ,wB,+BAMZ,IAAMY,EAAe,CAAEC,UAAWF,KAAKV,eACvC,OACE,yBAAKV,GAAG,sBAAsBuB,MAAO,CAAEC,UAAW,SAChD,yBAAKvB,UAAU,uCAAuCD,GAAG,aACvD,yBAAKC,UAAU,kBACb,kBAAC,EAAamB,KAAKd,MAAMC,OACzB,yBAAKN,UAAU,eACb,kBAAC,EAAaoB,GACd,kBAAC,EAAeD,KAAKd,MAAMC,e,GA9CZkB,IAAMC,WAuD7BC,E,uKAEF,IAAIC,EAeJ,OAbEA,EADER,KAAKf,MAAMwB,QAEX,4BAAQ5B,UAAU,oBAAoBD,GAAG,kBACvC,0BAAMA,GAAG,UAAUoB,KAAKf,MAAMI,QADhC,KACgD,0BAAMR,UAAU,aAAaD,GAAG,WAAWoB,KAAKf,MAAMwB,UAKtG,4BAAQ5B,UAAU,oBAAoBD,GAAG,kBACvC,0BAAMA,GAAG,UAAUoB,KAAKf,MAAMI,SAMlC,gCAAYR,UAAU,aAAaD,GAAG,SACpC,uBAAGA,GAAG,QAAQoB,KAAKf,MAAMG,MACxBoB,O,GApBcH,IAAMC,WA0BvBI,E,kDAGJ,WAAYzB,GAAiC,IAAD,8BAC1C,cAAMA,IAHRiB,eAE4C,EAE1C,EAAKA,UAAYjB,EAAMiB,UAFmB,E,qDAM1C,OACE,wBAAIrB,UAAU,oBACZ,4BAAQD,GAAG,YAAYC,UAAU,mCAAmC8B,QAASX,KAAKE,WAAlF,kB,GAXeG,IAAMC,WAiBvBM,E,uKAEF,IAAIC,EAAOC,mBAAmB,IAAD,OAAKd,KAAKf,MAAMG,KAAhB,eAA2BY,KAAKf,MAAMI,SACnE,OACE,wBAAIR,UAAU,oBACZ,uBAAGD,GAAG,cAAcC,UAAU,kBAAkBE,KAAI,gDAA2C8B,IAAQ,kBAAC,IAAD,CAAiBE,KAAMC,MAA9H,qB,GALiBX,IAAMC,WAWhBtB,ICpGAiC,MAVf,WACE,OACE,yBAAKrC,GAAG,OACN,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCcsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTUC,EAAQ,IAChBC,IAAI,mEAAmE,eAE/EC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.703cab90.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header(): JSX.Element {\n  return (\n    <div id=\"header\" className=\"jumbotron text-white bg-primary\">\n      <h1 className=\"display-4\">Random Quote Machine</h1>\n      <p className=\"lead\">Generate random quotes out of thin air!</p>\n    </div>\n  )\n}\n\nexport default Header;","import React from 'react';\n\nfunction Footer(): JSX.Element {\n  return (\n    <footer id=\"footer\" className=\"footer small bg-secondary text-white text-center\" >\n      <p>\n        Copyright Â© 2020 Jan Reggie Dela Cruz.\n        Project for the Front End Libraries Certification in <a href=\"https://www.freecodecamp.org/learn/\">freeCodeCamp</a>.\n      </p>\n      <p>\n        You may view the source code of this project over at <a href=\"https://github.com/janreggie/randomquoter\">github.com/janreggie/randomquoter</a>.\n      </p>\n      <p>\n        All quotes from this project have been sourced from <a href=\"https://en.wikiquote.org/wiki/Main_Page\">Wikiquote</a>.\n        Content is available under <a href=\"https://creativecommons.org/licenses/by-sa/3.0/\">CC BY-SA 3.0</a>\n      </p>\n    </footer>\n  )\n}\n\nexport default Footer;","import React from 'react'\nimport { Quote, /*DefaultQuotes*/ } from './Quote'\n//import { QuoteMachine } from './QuoteMachine'\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n//import { text } from '@fortawesome/fontawesome-svg-core';\n\nclass QuoteContainer extends React.Component {\n  //quoteMachine: QuoteMachine\n  state: { quote: Quote }\n\n  constructor(props: object) {\n    super(props)\n    //this.quoteMachine = new QuoteMachine(DefaultQuotes)\n    this.state = {\n      //quote: this.quoteMachine.generate()\n      quote: {\n        Text: \"Press New Quote to Generate\",\n        Author: \"Press New Quote\"\n      }\n    }\n    this.generateQuote = this.generateQuote.bind(this)\n  }\n\n\n  generateQuote(): void {\n    fetch('https://api.quotable.io/random')\n      .then(response => response.json())\n      .then(data => {\n        this.setState({\n          quote: {\n            Text: data.content,\n            Author: data.author\n          }\n        })\n      })\n    this.setState({\n      quote: {\n        Text: \"Fetching data...\",\n        Author: \"Fetching data...\"\n      }\n    })\n  }\n\n  render(): JSX.Element {\n    const newQuoteArgs = { generator: this.generateQuote }\n    return (\n      <div id=\"quote-box-container\" style={{ minHeight: \"50vh\" }}>\n        <div className=\"card border-primary mx-auto bg-light\" id=\"quote-box\">\n          <div className=\"card-body h-50\" >\n            <QuoteBox {...this.state.quote} />\n            <div className=\"list-inline\">\n              <NewQuote {...newQuoteArgs} />\n              <TweetQuote {...this.state.quote} />\n            </div>\n          </div>\n        </div>\n      </div >\n    )\n  }\n}\n\nclass QuoteBox extends React.Component<Quote> {\n  render(): JSX.Element {\n    let footerContent: JSX.Element\n    if (this.props.Context) {\n      footerContent = (\n        <footer className=\"blockquote-footer\" id=\"author-context\">\n          <span id=\"author\">{this.props.Author}</span>, <cite className=\"text-muted\" id=\"context\">{this.props.Context}</cite>\n        </footer>\n      )\n    } else {\n      footerContent = (\n        <footer className=\"blockquote-footer\" id=\"author-context\">\n          <span id=\"author\">{this.props.Author}</span>\n        </footer>\n      )\n    }\n\n    return (\n      <blockquote className=\"blockquote\" id=\"quote\">\n        <p id=\"text\">{this.props.Text}</p>\n        {footerContent}\n      </blockquote>\n    )\n  }\n}\n\nclass NewQuote extends React.Component {\n  generator: () => {}\n\n  constructor(props: { generator: () => {} }) {\n    super(props)\n    this.generator = props.generator\n  }\n\n  render(): JSX.Element {\n    return (\n      <li className=\"list-inline-item\">\n        <button id=\"new-quote\" className=\"list-inline-item btn btn-primary\" onClick={this.generator}>New Quote</button>\n      </li>\n    )\n  }\n}\n\nclass TweetQuote extends React.Component<Quote> {\n  render(): JSX.Element {\n    let text = encodeURIComponent(`\"${this.props.Text}\" - ${this.props.Author}`)\n    return (\n      <li className=\"list-inline-item\">\n        <a id=\"tweet-quote\" className=\"btn btn-primary\" href={`https://twitter.com/intent/tweet?text=${text}`}><FontAwesomeIcon icon={faTwitter} /> Tweet Quote</a>\n      </li>\n    )\n  }\n}\n\nexport default QuoteContainer\n","import React from 'react';\nimport './App.scss';\nimport Header from './Header';\nimport Footer from './Footer';\nimport QuoteContainer from './QuoteContainer';\n\nfunction App() {\n  return (\n    <div id=\"App\">\n      <Header />\n      <QuoteContainer />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Include freeCodeCamp testing suite\nconst $script = require('scriptjs')\n$script.get('https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js', () => {});\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}